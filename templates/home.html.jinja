{% extends "base.html.jinja" %}

{% block head %}
<style>
  label {
    display: inline-flex;
    align-items: center;
    gap: .5rem;
    font-family: sans-serif;
    cursor: pointer;
    user-select: none;
    margin: .5rem;
  }

  input[type="checkbox"] {
    -webkit-appearance: none;
    appearance: none;
    width: 1.2rem;
    height: 1.2rem;
    background: rgba(255, 255, 255, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.6);
    border-radius: .3rem;
    backdrop-filter: blur(6px);
    position: relative;
    transition: background .2s, border-color .2s;
  }

  input[type="checkbox"]:hover {
    border-color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
  }

  input[type="checkbox"]:focus {
    outline: 2px solid rgba(0, 0, 0, 0.2);
    outline-offset: 2px;
  }

  input[type="checkbox"]::after {
    content: "";
    position: absolute;
    top: 2px;
    left: 5px;
    width: 4px;
    height: 8px;
    border: solid #222;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg) scale(0);
    transform-origin: center;
    transition: transform .1s ease-in-out;
  }

  input[type="checkbox"]:checked {
    background: #fff;
    border-color: rgba(255, 255, 255, 0.8);
  }

  input[type="checkbox"]:checked::after {
    transform: rotate(45deg) scale(1);
  }
</style>

<style>
  .container {
    padding-bottom: 40px;
  }

  .bottom-container {
    position: fixed;
    bottom: 10px;
    left: 10px;
    right: 10px;

    display: flex;
    flex-direction: column;
  }

  .metadata {
    font-size: 12px;
    color: #999;
    background-color: #000;
    padding: 5px;
    border-radius: 5px 5px 0 0;

    margin-right: 5px;

    user-select: none;

    text-align: right;
    width: fit-content;
    margin-left: auto;
  }

  #snippet-container {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  #snippet-url {
    width: 100%;

    background-color: var(--secondary-color);
    border: 0;

    border-radius: 5px;

    box-sizing: border-box;
    padding: 10px;

    color: var(--text-color);
    font-size: 20px;
    font-weight: 800;
    font-family: monospace;

    padding-right: 2.5em;
    transition: all 0.2s ease-in-out;
  }

  #snippet-url:hover {
    cursor: pointer;
  }

  #copy-icon {
    position: absolute;
    right: 1em;
    top: 50%;
    width: 1.2em;
    height: 1.2em;
    transform: translateY(-50%);
    cursor: pointer;
    fill: var(--text-color);
    transition: fill 0.2s;
  }
</style>
{%endblock%}


{% block content %}
<div class="container">
  {% for item in items %}
  <label>
    <input type="checkbox" value="{{ item[0] }}">
    {{ item[1] }}
  </label><br>
  {% endfor %}
</div>

<div class="bottom-container">
  <a href="{{ repo['origin'] }}/tree/{{ repo['commit'] }}" target="_blank" class="metadata">
    {{ repo["branch"] }}@{{ repo["commit"][:7] }}
  </a>

  <div id="snippet-container">
    <input type="text" id="snippet-url" placeholder="@import '...'" readonly>

    <svg id="copy-icon" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
      <path
        d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z" />
    </svg>
  </div>
</div>
{% endblock %}

{% block script %}
<script defer>
  let enabledSnippets = [];

  const BASE_URL = document.location.origin;

  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  const snippetUrl = document.getElementById('snippet-url');
  const copyIcon = document.getElementById('copy-icon');
  const clipPath = copyIcon.innerHTML;
  const checkSVG = `
    <path d="M9 16.2l-3.5-3.5 1.4-1.4L9 
      13.4l7.1-7.1 1.4 1.4z"/>
  `;

  snippetUrl.value = "" // reset on page load

  const copySnippet = async () => {
    const value = snippetUrl.value;
    if (value === "") {
      return;
    }

    await navigator.clipboard.writeText(value);
    copyIcon.innerHTML = checkSVG;

    setTimeout(() => {
      copyIcon.innerHTML = clipPath;
    }, 1200);
  }

  snippetUrl.addEventListener('click', copySnippet);
  copyIcon.addEventListener('click', copySnippet);

  const mask = (indices) => {
    let bitmask = 0;
    for (const i of indices) {
      bitmask |= 1 << i;
    }

    return bitmask;
  }

  checkboxes.forEach((checkbox) => {
    checkbox.checked = false; // reset on page load

    checkbox.addEventListener('change', () => {
      enabledSnippets =
        Array.from(checkboxes)
          .filter(i => i.checked)
          .map(i => parseInt(i.value))

      if (enabledSnippets.length > 0) {
        snippetUrl.value = `@import '${BASE_URL}/snippets/${mask(enabledSnippets)}';`;
      } else {
        snippetUrl.value = "";
      }

    });
  });
</script>
{%endblock%}